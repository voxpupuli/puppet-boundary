# Installs, configures, and manages boundary
#
# @example To set up a single boundary server, with several agents attached, on the server.
#   class { 'boundary':
#     config_hash => {
#       'region'     => 'us-west',
#       'datacenter' => 'ptk',
#       'log_level'  => 'INFO',
#       'bind_addr'  => '0.0.0.0',
#       'data_dir'   => '/opt/boundary',
#       'server'     => {
#         'enabled'          => true,
#         'bootstrap_expect' => 3,
#       }
#     }
#   }
#
# @example On the agent(s)
#   class { 'boundary':
#     config_hash => {
#       'region'     => 'us-west',
#       'datacenter' => 'ptk',
#       'log_level'  => 'INFO',
#       'bind_addr'  => '0.0.0.0',
#       'data_dir'   => '/opt/boundary',
#       'client'     => {
#         'enabled' => true,
#         'servers' => [
#           "boundary01.your-org.pvt:4647",
#           "boundary02.your-org.pvt:4647",
#           "boundary03.your-org.pvt:4647"
#         ]
#       }
#     },
#   }
#
# @example Install from zip file for a CPU architecture HashiCorp does not provide native packages for.
#   class { 'boundary':
#     arch                => 'armv7l',
#     install_method      => 'url',
#     manage_service_file => true,
#     version             => '1.0.3', # check latest version at https://github.com/hashicorp/boundary/blob/master/CHANGELOG.md
#     config_hash         => {
#       'region'     => 'us-west',
#       'datacenter' => 'ptk',
#       'log_level'  => 'INFO',
#       'bind_addr'  => '0.0.0.0',
#       'data_dir'   => '/opt/boundary',
#       'client'     => {
#         'enabled' => true,
#         'servers' => [
#           "boundary01.your-org.pvt:4647",
#           "boundary02.your-org.pvt:4647",
#           "boundary03.your-org.pvt:4647"
#         ]
#       }
#     },
#   }
#
# @example Disable install and service components
#   class { 'boundary':
#     install_method => 'none',
#     manage_service => false,
#     config_hash    => {
#       region     => 'us-west',
#       datacenter => 'ptk',
#       log_level  => 'INFO',
#       bind_addr  => '0.0.0.0',
#       data_dir   => '/opt/boundary',
#       'client'     => {
#         'enabled' => true,
#         'servers' => [
#           "boundary01.your-org.pvt:4647",
#           "boundary02.your-org.pvt:4647",
#           "boundary03.your-org.pvt:4647"
#         ]
#       }
#     },
#   }
#
# @param arch
#   cpu architecture
# @param purge_config_dir
#   Purge config files no longer generated by Puppet
# @param data_dir_mode
#   Specify unix permissions for data dir directory managed by this module
# @param join_wan
#   join boundary cluster over the WAN
# @param bin_dir
#   location of the boundary binary
# @param version
#   Specify version of boundary binary to download.
# @param install_method
#   install via system package, download and extract from a url.
# @param os
#   operation system to install for
# @param download_url
#   download url to download from
# @param download_url_base
#   download hostname to down from
# @param download_extension
#   archive type to download
# @param package_name
#   Only valid when the install_method == package.
# @param config_dir
#   location of the boundary configuration
# @param extra_options
#   Extra arguments to be passed to the boundary agent
# @param config_hash
#   Use this to populate the JSON config file for boundary.
# @param config_defaults
#   default set of config settings
# @param config_validator
#   Use this to set the JSON config file validation command. It defaults to boundary validator which is currenly missing some validation checks.
#   If ruby is available on the system you could use 'ruby_validator', or create your own script (ending with space and % symbol).
# @param config_mode
#   Use this to set the JSON config file mode for boundary.
# @param manage_repo
#   Configure the upstream HashiCorp repository. Only relevant when $boundary::install_method = 'package'.
# @param manage_service
#   manage the boundary service
# @param manage_service_file
#   create and manage the systemd service file
# @param pretty_config
#   Generates a human readable JSON config file.
# @param service_enable
#   enable the boundary service
# @param service_ensure
#   ensure the state of the boundary service
# @param restart_on_change
#   Determines whether to restart boundary agent on $config_hash changes. This will not affect reloads when service, check or watch configs change.
# @param env_vars
#   Hash of optional environment variables that should be passed to boundary
# @param user
#   User to run the Boundary binary as. Also used as owner of directories and config files managed by this module.
# @param group
#   Group to run the Boundary binary as. Also used as group of directories and config files managed by this module.
class boundary (
  String[1] $arch,
  Boolean $purge_config_dir                      = true,
  Stdlib::Filemode $data_dir_mode                = '0755',
  Optional[String[1]] $join_wan                  = undef,
  Stdlib::Absolutepath $bin_dir                  = '/usr/bin',
  String[1] $version                             = 'installed',
  Enum['none', 'package', 'url'] $install_method = 'package',
  String[1] $os                                  = downcase($facts['kernel']),
  Optional[String[1]] $download_url              = undef,
  String[1] $download_url_base                   = 'https://releases.hashicorp.com/boundary/',
  String[1] $download_extension                  = 'zip',
  String[1] $package_name                        = 'boundary',
  Stdlib::Absolutepath $config_dir               = '/etc/boundary.d',
  Optional[String[1]] $extra_options             = undef,
  Hash $config_hash                              = {},
  Hash $config_defaults                          = {},
  Stdlib::Filemode $config_mode                  = '0660',
  Boolean $pretty_config                         = false,
  Boolean $service_enable                        = true,
  Stdlib::Ensure::Service $service_ensure        = 'running',
  Boolean $manage_repo                           = true,
  Boolean $manage_service                        = true,
  Boolean $manage_service_file                   = false,
  Boolean $restart_on_change                     = true,
  Hash[String[1], String] $env_vars              = {},
  String[1] $user                                = 'root',
  String[1] $group                               = 'root',
  Variant[
    Enum['boundary_validator', 'ruby_validator'], Pattern[/\A.*\ %\z/]
  ] $config_validator                            = 'boundary_validator',
) {
  $real_download_url = pick($download_url, "${download_url_base}${version}/${package_name}_${version}_${os}_${arch}.${download_extension}")
  $config_hash_real = deep_merge($config_defaults, $config_hash)

  if $config_hash_real['data_dir'] {
    $data_dir = $config_hash_real['data_dir']
  } else {
    $data_dir = undef
  }

  if ($config_hash_real['ports'] and $config_hash_real['ports']['rpc']) {
    $rpc_port = $config_hash_real['ports']['rpc']
  } else {
    $rpc_port = 8400
  }

  if ($config_hash_real['addresses'] and $config_hash_real['addresses']['rpc']) {
    $rpc_addr = $config_hash_real['addresses']['rpc']
  } elsif ($config_hash_real['client_addr']) {
    $rpc_addr = $config_hash_real['client_addr']
  } else {
    $rpc_addr = $facts['networking']['interfaces']['lo']['ip']
  }

  $notify_service = $restart_on_change ? {
    true    => Class['boundary::run_service'],
    default => undef,
  }

  class { 'boundary::install': }
  -> class { 'boundary::config':
    notify => $notify_service,
  }
  -> class { 'boundary::run_service': }
  -> class { 'boundary::reload_service': }

  contain boundary::install
  contain boundary::config
  contain boundary::run_service
  contain boundary::reload_service
}
